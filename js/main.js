/**
 * –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
class GameApp {
    constructor() {
        this.isInitialized = false;
        this.currentFaction = null;
        
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
     */
    async init() {
        console.log('Initializing Tower Defense PWA...');
        
        try {
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Service Worker –¥–ª—è PWA
            await this.registerServiceWorker();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            await this.initializeApp();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
            await this.startGame();
            
            this.isInitialized = true;
            console.log('Game initialized successfully');
            
        } catch (error) {
            console.error('Failed to initialize game:', error);
        }
    }
    
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç Service Worker
     */
    async registerServiceWorker() {
        if ('serviceWorker' in navigator) {
            try {
                const registration = await navigator.serviceWorker.register('/sw.js');
                console.log('Service Worker registered:', registration);
            } catch (error) {
                console.log('Service Worker registration failed:', error);
            }
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
     */
    async initializeApp() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞
        this.checkOrientation();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.bindEvents();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        this.loadSavedData();
    }
    
    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É
     */
    async startGame() {
        // –ù–∞—á–∏–Ω–∞–µ–º —Å —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        await screenManager.switchTo('loading-screen', {
            nextScreen: 'main-menu'
        });
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —ç–∫—Ä–∞–Ω–∞
     */
    checkOrientation() {
        const isPortrait = window.innerHeight > window.innerWidth;
        
        if (isPortrait) {
            console.warn('Game requires landscape orientation');
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞
            this.showOrientationWarning();
        }
        
        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
        window.addEventListener('orientationchange', () => {
            setTimeout(() => {
                const isPortrait = window.innerHeight > window.innerWidth;
                if (isPortrait) {
                    this.showOrientationWarning();
                } else {
                    this.hideOrientationWarning();
                }
            }, 100);
        });
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
     */
    showOrientationWarning() {
        let warning = document.getElementById('orientation-warning');
        if (!warning) {
            warning = document.createElement('div');
            warning.id = 'orientation-warning';
            warning.innerHTML = `
                <div style="
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: #1a1a1a;
                    color: #fff;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    font-size: 18px;
                    z-index: 9999;
                    text-align: center;
                    padding: 20px;
                ">
                    <div>
                        <div style="font-size: 48px; margin-bottom: 20px;">üì±</div>
                        <div>–ü–æ–≤–µ—Ä–Ω–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ</div>
                        <div style="font-size: 14px; margin-top: 10px; color: #bdc3c7;">
                            –ò–≥—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
                        </div>
                    </div>
                </div>
            `;
            document.body.appendChild(warning);
        }
    }
    
    /**
     * –°–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
     */
    hideOrientationWarning() {
        const warning = document.getElementById('orientation-warning');
        if (warning) {
            warning.remove();
        }
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è
     */
    bindEvents() {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        document.addEventListener('contextmenu', (e) => {
            e.preventDefault();
        });
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        document.addEventListener('selectstart', (e) => {
            e.preventDefault();
        });
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
        document.addEventListener('dragstart', (e) => {
            e.preventDefault();
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', () => {
            this.handleResize();
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞
        window.addEventListener('blur', () => {
            this.handleBlur();
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ–∫—É—Å–∞
        window.addEventListener('focus', () => {
            this.handleFocus();
        });
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     */
    loadSavedData() {
        try {
            const saveData = localStorage.getItem('towerDefenseSave');
            if (saveData) {
                const data = JSON.parse(saveData);
                this.currentFaction = data.faction;
                console.log('Loaded saved data:', data);
            }
        } catch (error) {
            console.error('Failed to load saved data:', error);
        }
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    saveGameData(data) {
        try {
            localStorage.setItem('towerDefenseSave', JSON.stringify(data));
            console.log('Game data saved:', data);
        } catch (error) {
            console.error('Failed to save game data:', error);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
     */
    handleResize() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas
        const canvas = document.getElementById('gameCanvas');
        if (canvas) {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
        this.checkOrientation();
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Ç–µ—Ä—é —Ñ–æ–∫—É—Å–∞
     */
    handleBlur() {
        console.log('Window lost focus');
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—É–∑—É –∏–≥—Ä—ã –∏–ª–∏ –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ–∫—É—Å–∞
     */
    handleFocus() {
        console.log('Window gained focus');
        // –ú–æ–∂–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É –∏–ª–∏ –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ñ—Ä–∞–∫—Ü–∏—é
     */
    getCurrentFaction() {
        return this.currentFaction;
    }
    
    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ñ—Ä–∞–∫—Ü–∏—é
     * @param {string} faction - –§—Ä–∞–∫—Ü–∏—è
     */
    setCurrentFaction(faction) {
        this.currentFaction = faction;
    }
    
    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å
     * @param {number} levelId - ID —É—Ä–æ–≤–Ω—è
     */
    async startLevel(levelId) {
        console.log(`Starting level ${levelId}`);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è
        const levelData = this.getLevelData(levelId);
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω —É—Ä–æ–≤–Ω—è
        await screenManager.switchTo('level-screen', {
            levelData: levelData
        });
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è
     * @param {number} levelId - ID —É—Ä–æ–≤–Ω—è
     */
    getLevelData(levelId) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è –∏–∑ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ API
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        return {
            id: levelId,
            name: `–£—Ä–æ–≤–µ–Ω—å ${levelId}`,
            // ... –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω—è
        };
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
window.gameApp = new GameApp();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = GameApp;
}